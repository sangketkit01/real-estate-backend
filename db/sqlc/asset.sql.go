// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: asset.sql

package db

import (
	"context"
	"database/sql"
	"time"
)

const deleteAsset = `-- name: DeleteAsset :exec
DELETE FROM assets
WHERE id = $1
`

func (q *Queries) DeleteAsset(ctx context.Context, id int64) error {
	_, err := q.db.ExecContext(ctx, deleteAsset, id)
	return err
}

const getAllAssets = `-- name: GetAllAssets :many
SELECT 
  a.id,
  a.owner,
  a.price,
  a.detail,
  a.status,
  a.created_at,
  a.updated_at,
  ac.id AS contact_id,
  ac.contact_name,
  ac.contact_detail,
  ai.id AS image_id,
  ai.image_url
FROM assets a
LEFT JOIN asset_contacts ac ON ac.asset_id = a.id
LEFT JOIN asset_images ai ON ai.asset_id = a.id
ORDER BY a.id DESC
LIMIT $1 OFFSET $2
`

type GetAllAssetsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

type GetAllAssetsRow struct {
	ID            int64          `json:"id"`
	Owner         string         `json:"owner"`
	Price         int64          `json:"price"`
	Detail        string         `json:"detail"`
	Status        bool           `json:"status"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	ContactID     sql.NullInt64  `json:"contact_id"`
	ContactName   sql.NullString `json:"contact_name"`
	ContactDetail sql.NullString `json:"contact_detail"`
	ImageID       sql.NullInt64  `json:"image_id"`
	ImageUrl      sql.NullString `json:"image_url"`
}

func (q *Queries) GetAllAssets(ctx context.Context, arg GetAllAssetsParams) ([]GetAllAssetsRow, error) {
	rows, err := q.db.QueryContext(ctx, getAllAssets, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAllAssetsRow{}
	for rows.Next() {
		var i GetAllAssetsRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Price,
			&i.Detail,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContactID,
			&i.ContactName,
			&i.ContactDetail,
			&i.ImageID,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const getAssetById = `-- name: GetAssetById :one
SELECT 
  a.id,
  a.owner,
  a.price,
  a.detail,
  a.status,
  a.created_at,
  a.updated_at,
  ac.id AS contact_id,
  ac.contact_name,
  ac.contact_detail,
  ai.id AS image_id,
  ai.image_url
FROM assets a
LEFT JOIN asset_contacts ac ON ac.asset_id = a.id
LEFT JOIN asset_images ai ON ai.asset_id = a.id
WHERE a.id = $1
`

type GetAssetByIdRow struct {
	ID            int64          `json:"id"`
	Owner         string         `json:"owner"`
	Price         int64          `json:"price"`
	Detail        string         `json:"detail"`
	Status        bool           `json:"status"`
	CreatedAt     time.Time      `json:"created_at"`
	UpdatedAt     time.Time      `json:"updated_at"`
	ContactID     sql.NullInt64  `json:"contact_id"`
	ContactName   sql.NullString `json:"contact_name"`
	ContactDetail sql.NullString `json:"contact_detail"`
	ImageID       sql.NullInt64  `json:"image_id"`
	ImageUrl      sql.NullString `json:"image_url"`
}

func (q *Queries) GetAssetById(ctx context.Context, id int64) (GetAssetByIdRow, error) {
	row := q.db.QueryRowContext(ctx, getAssetById, id)
	var i GetAssetByIdRow
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Price,
		&i.Detail,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.ContactID,
		&i.ContactName,
		&i.ContactDetail,
		&i.ImageID,
		&i.ImageUrl,
	)
	return i, err
}

const getAssetCount = `-- name: GetAssetCount :one
SELECT count(id) FROM assets
`

func (q *Queries) GetAssetCount(ctx context.Context) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAssetCount)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAssetCountByUsername = `-- name: GetAssetCountByUsername :one
SELECT count(id) FROM assets
WHERE owner = $1
`

func (q *Queries) GetAssetCountByUsername(ctx context.Context, owner string) (int64, error) {
	row := q.db.QueryRowContext(ctx, getAssetCountByUsername, owner)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const getAssetsByUsername = `-- name: GetAssetsByUsername :many
SELECT 
  a.id,
  a.owner,
  a.price,
  a.detail,
  a.status,
  a.created_at,
  a.updated_at,
  MIN(ac.id) AS contact_id,
  MIN(ac.contact_name) AS contact_name,
  MIN(ac.contact_detail) AS contact_detail,
  MIN(ai.id) AS image_id,
  MIN(ai.image_url) AS image_url
FROM assets a
LEFT JOIN asset_contacts ac ON ac.asset_id = a.id
LEFT JOIN asset_images ai ON ai.asset_id = a.id
WHERE a.owner = $1
GROUP BY a.id
ORDER BY a.id DESC
LIMIT $2 OFFSET $3
`

type GetAssetsByUsernameParams struct {
	Owner  string `json:"owner"`
	Limit  int32  `json:"limit"`
	Offset int32  `json:"offset"`
}

type GetAssetsByUsernameRow struct {
	ID            int64       `json:"id"`
	Owner         string      `json:"owner"`
	Price         int64       `json:"price"`
	Detail        string      `json:"detail"`
	Status        bool        `json:"status"`
	CreatedAt     time.Time   `json:"created_at"`
	UpdatedAt     time.Time   `json:"updated_at"`
	ContactID     interface{} `json:"contact_id"`
	ContactName   interface{} `json:"contact_name"`
	ContactDetail interface{} `json:"contact_detail"`
	ImageID       interface{} `json:"image_id"`
	ImageUrl      interface{} `json:"image_url"`
}

func (q *Queries) GetAssetsByUsername(ctx context.Context, arg GetAssetsByUsernameParams) ([]GetAssetsByUsernameRow, error) {
	rows, err := q.db.QueryContext(ctx, getAssetsByUsername, arg.Owner, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetAssetsByUsernameRow{}
	for rows.Next() {
		var i GetAssetsByUsernameRow
		if err := rows.Scan(
			&i.ID,
			&i.Owner,
			&i.Price,
			&i.Detail,
			&i.Status,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ContactID,
			&i.ContactName,
			&i.ContactDetail,
			&i.ImageID,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const insertAsset = `-- name: InsertAsset :one
INSERT INTO assets 
    (owner, price, detail)
VALUES 
    ($1, $2, $3)
RETURNING id, owner, price, detail, status, created_at, updated_at
`

type InsertAssetParams struct {
	Owner  string `json:"owner"`
	Price  int64  `json:"price"`
	Detail string `json:"detail"`
}

func (q *Queries) InsertAsset(ctx context.Context, arg InsertAssetParams) (Asset, error) {
	row := q.db.QueryRowContext(ctx, insertAsset, arg.Owner, arg.Price, arg.Detail)
	var i Asset
	err := row.Scan(
		&i.ID,
		&i.Owner,
		&i.Price,
		&i.Detail,
		&i.Status,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const updateAsset = `-- name: UpdateAsset :exec
UPDATE assets
SET price = coalesce($1, price), detail = coalesce($2, detail)
WHERE id = $3
`

type UpdateAssetParams struct {
	Price  int64  `json:"price"`
	Detail string `json:"detail"`
	ID     int64  `json:"id"`
}

func (q *Queries) UpdateAsset(ctx context.Context, arg UpdateAssetParams) error {
	_, err := q.db.ExecContext(ctx, updateAsset, arg.Price, arg.Detail, arg.ID)
	return err
}
