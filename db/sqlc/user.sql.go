// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
	"database/sql"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users 
    (username, name, email, phone, password) 
VALUES(
    $1, $2, $3, $4, $5
) RETURNING username, name, email, phone, password, profile_url, created_at, updated_at, roles
`

type CreateUserParams struct {
	Username string `json:"username"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ProfileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Roles,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, name, email, phone, password, profile_url, created_at, updated_at, roles FROM users 
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ProfileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
		&i.Roles,
	)
	return i, err
}

const getUserPassword = `-- name: GetUserPassword :one
SELECT password FROM users
WHERE username = $1
`

func (q *Queries) GetUserPassword(ctx context.Context, username string) (string, error) {
	row := q.db.QueryRowContext(ctx, getUserPassword, username)
	var password string
	err := row.Scan(&password)
	return password, err
}

const loginUser = `-- name: LoginUser :one
SELECT username, password FROM users
WHERE username = $1
`

type LoginUserRow struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) LoginUser(ctx context.Context, username string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, username)
	var i LoginUserRow
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}

const updateUser = `-- name: UpdateUser :exec
UPDATE users
SET name = coalesce($1, name) , email = coalesce($2, email) , phone = coalesce($3, phone) , 
    profile_url = coalesce($4, profile_url)
WHERE  username = $5
`

type UpdateUserParams struct {
	Name       sql.NullString `json:"name"`
	Email      sql.NullString `json:"email"`
	Phone      sql.NullString `json:"phone"`
	ProfileUrl sql.NullString `json:"profile_url"`
	Username   string         `json:"username"`
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) error {
	_, err := q.db.ExecContext(ctx, updateUser,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.ProfileUrl,
		arg.Username,
	)
	return err
}

const updateUserPassword = `-- name: UpdateUserPassword :exec
UPDATE users 
SET password = $1
WHERE username = $2
`

type UpdateUserPasswordParams struct {
	Password string `json:"password"`
	Username string `json:"username"`
}

func (q *Queries) UpdateUserPassword(ctx context.Context, arg UpdateUserPasswordParams) error {
	_, err := q.db.ExecContext(ctx, updateUserPassword, arg.Password, arg.Username)
	return err
}
