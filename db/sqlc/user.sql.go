// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.29.0
// source: user.sql

package db

import (
	"context"
)

const createUser = `-- name: CreateUser :one
INSERT INTO users 
    (username, name, email, phone, password) 
VALUES(
    $1, $2, $3, $4, $5
) RETURNING username, name, email, phone, password, profile_url, created_at, updated_at
`

type CreateUserParams struct {
	Username string `json:"username"`
	Name     string `json:"name"`
	Email    string `json:"email"`
	Phone    string `json:"phone"`
	Password string `json:"password"`
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRowContext(ctx, createUser,
		arg.Username,
		arg.Name,
		arg.Email,
		arg.Phone,
		arg.Password,
	)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ProfileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const getUser = `-- name: GetUser :one
SELECT username, name, email, phone, password, profile_url, created_at, updated_at FROM users 
WHERE username = $1
`

func (q *Queries) GetUser(ctx context.Context, username string) (User, error) {
	row := q.db.QueryRowContext(ctx, getUser, username)
	var i User
	err := row.Scan(
		&i.Username,
		&i.Name,
		&i.Email,
		&i.Phone,
		&i.Password,
		&i.ProfileUrl,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const loginUser = `-- name: LoginUser :one
SELECT username, password FROM users
WHERE username = $1
`

type LoginUserRow struct {
	Username string `json:"username"`
	Password string `json:"password"`
}

func (q *Queries) LoginUser(ctx context.Context, username string) (LoginUserRow, error) {
	row := q.db.QueryRowContext(ctx, loginUser, username)
	var i LoginUserRow
	err := row.Scan(&i.Username, &i.Password)
	return i, err
}
